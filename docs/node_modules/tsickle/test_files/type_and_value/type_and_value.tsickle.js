Warning;
at;
test_files / type_and_value / type_and_value.ts;
10;
5;
unhandled;
anonymous;
type;
Warning;
at;
test_files / type_and_value / type_and_value.ts;
16;
5;
type / symbol;
conflict;
for (TypeAndValue, using; {}; )
    for (now
        === ;  =
    ; )
// This test deals with symbols that are simultaneously types and values.
// Use a browser built-in as both a type and a value.
var /** @type {{prototype: Document, __new: ?}} */ useBuiltInAsValue = Document;
var /** @type {Document} */ useBuiltInAsType = null;
// Use a user-defined class as both a type and a value.
var /** @type {?} */ useUserClassAsValue = conflict.Class;
var /** @type {conflict.Class} */ useUserClassAsType = null;
// Use a user-defined interface/value pair as both a type and a value.
var /** @type {number} */ useAsValue = conflict.TypeAndValue;
// Note: because of the conflict, we currently just use the type {?} here.
var /** @type {?} */ useAsType = null;
//# sourceMappingURL=type_and_value.tsickle.js.map