Warning;
at;
test_files / type / type.ts;
13;
5;
unhandled;
at;
test_files / type / type.ts;
28;
1;
unhandled;
type;
{
    0x4000;
    TypeParameter;
    symbol.name;
    "T";
}
Warning;
at;
test_files / type / type.ts;
28;
1;
unhandled;
type;
{
    0x4000;
    TypeParameter;
    symbol.name;
    "T";
}
    === ;
var /** @type {?} */ typeAny;
var /** @type {Array<?>} */ typeArr = null;
var /** @type {Array<?>} */ typeArr2 = null;
var /** @type {Array<Array<{a: ?}>>} */ typeNestedArr = null;
var /** @type {{a: number, b: string}} */ typeObject = { a: 3, b: 'b' };
var /** @type {Object<string,number>} */ typeObject2 = null;
var /** @type {?} */ typeObject3 = null;
var /** @type {Object} */ typeObjectEmpty = null;
var /** @type {(string|boolean)} */ typeUnion = Math.random() > 0.5 ? false : '';
var /** @type {(string|boolean)} */ typeUnion2 = Math.random() > 0.5 ? false : '';
var /** @type {{optional: (boolean|undefined)}} */ typeOptionalField = {};
var /** @type {{optional: ((string|boolean)|undefined)}} */ typeOptionalUnion = {};
var /** @type {function(): void} */ typeFunc = function () { };
var /** @type {function(number, ?): string} */ typeFunc2 = function (a, b) { return ''; };
var /** @type {function(number, function(number): string): string} */ typeFunc3 = function (x, cb) { return ''; };
/**
 * @param {function(number): number} callback
 * @return {void}
 */
function typeCallback(callback) { }
typeCallback(function (val) { return val + 1; });
/**
 * @param {function(?): ?} callback
 * @return {void}
 */
function typeGenericCallback(callback) { }
typeGenericCallback(function (val) { return val; });
//# sourceMappingURL=type.tsickle.js.map