var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
/**
 * @param {Object} a
 * @param {string} b
 * @return {void}
 */
function decorator(a, b) { }
/**
 * @param {Object} a
 * @param {string} b
 * @return {void}
 */
function annotationDecorator(a, b) { }
var DecoratorTest = (function () {
    function DecoratorTest() {
    }
    DecoratorTest._tsickle_typeAnnotationsHelper = function () {
        /** @type {Object<string,Array<DecoratorInvocation>>} */
        DecoratorTest.propDecorators;
        /** @type {number} */
        DecoratorTest.prototype.x;
        /** @type {number} */
        DecoratorTest.prototype.y;
    };
    DecoratorTest.propDecorators = {
        'y': [{ type: annotationDecorator },],
    };
    __decorate([
        decorator, 
        __metadata('design:type', Number)
    ], DecoratorTest.prototype, "x", void 0);
    return DecoratorTest;
}());
/** @record */
function DecoratorInvocation() { }
/** @type {Function} */
DecoratorInvocation.prototype.type;
/** @type {Array<?>} */
DecoratorInvocation.prototype.args;
//# sourceMappingURL=decorator.tsickle.js.map