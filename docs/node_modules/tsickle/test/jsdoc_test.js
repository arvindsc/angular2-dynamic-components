"use strict";
var chai_1 = require('chai');
var jsdoc = require('../src/jsdoc');
describe('jsdoc.parse', function () {
    it('does not get non-jsdoc values', function () {
        var source = '/* ordinary comment */';
        chai_1.expect(jsdoc.parse(source)).to.equal(null);
    });
    it('grabs plain text from jsdoc', function () {
        var source = '/** jsdoc comment */';
        chai_1.expect(jsdoc.parse(source)).to.deep.equal({ tags: [{ text: 'jsdoc comment' }] });
    });
    it('gathers @tags from jsdoc', function () {
        var source = "/**\n  * @param foo\n  * @param bar multiple\n  *    line comment\n  * @return foobar\n  * @nosideeffects\n  */";
        chai_1.expect(jsdoc.parse(source)).to.deep.equal({
            tags: [
                { tagName: 'param', parameterName: 'foo' },
                { tagName: 'param', parameterName: 'bar', text: 'multiple line comment' },
                { tagName: 'return', text: 'foobar' },
                { tagName: 'nosideeffects' },
            ]
        });
    });
    it('warns on type annotations in parameters', function () {
        var source = "/**\n  * @param {string} foo\n*/";
        chai_1.expect(jsdoc.parse(source)).to.deep.equal({
            tags: [],
            warnings: ['type annotations (using {...}) are redundant with TypeScript types']
        });
    });
    it('warns on @type annotations', function () {
        var source = "/** @type {string} foo */";
        chai_1.expect(jsdoc.parse(source)).to.deep.equal({
            tags: [],
            warnings: ['@type annotations are redundant with TypeScript equivalents']
        });
    });
    it('allows @suppress annotations', function () {
        var source = "/** @suppress {checkTypes} I hate types */";
        chai_1.expect(jsdoc.parse(source)).to.deep.equal({
            tags: [{ tagName: 'suppress', text: '{checkTypes} I hate types' }]
        });
    });
});
//# sourceMappingURL=jsdoc_test.js.map