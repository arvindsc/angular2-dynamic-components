"use strict";
var fs = require('fs');
var glob = require('glob');
var path = require('path');
var ts = require('typescript');
var cliSupport = require('../src/cli_support');
var tsickle = require('../src/tsickle');
var util_1 = require('../src/util');
/** The TypeScript compiler options used by the test suite. */
var compilerOptions = {
    target: ts.ScriptTarget.ES6,
    skipDefaultLibCheck: true,
    experimentalDecorators: true,
    emitDecoratorMetadata: true,
    noEmitHelpers: true,
    module: ts.ModuleKind.CommonJS,
    jsx: ts.JsxEmit.React,
    // Flags below are needed to make sure source paths are correctly set on write calls.
    rootDir: path.resolve(process.cwd()),
    outDir: '.',
};
var _a = (function () {
    var host = ts.createCompilerHost(compilerOptions);
    var fn = host.getDefaultLibFileName(compilerOptions);
    var p = ts.getDefaultLibFilePath(compilerOptions);
    return { cachedLibPath: p, cachedLib: host.getSourceFile(fn, ts.ScriptTarget.ES6) };
})(), cachedLibPath = _a.cachedLibPath, cachedLib = _a.cachedLib;
/** Creates a ts.Program from a set of input files. */
function createProgram(sources) {
    var host = ts.createCompilerHost(compilerOptions);
    // Fake out host.directoryExists so that it doesn't read through node_modules/@types.
    var realDirectoryExists = host.directoryExists;
    host.directoryExists = function (dirName) {
        if (path.isAbsolute(dirName)) {
            var relName = path.relative(process.cwd(), dirName);
            if (relName === 'node_modules/@types')
                return false;
        }
        return realDirectoryExists ? realDirectoryExists(dirName) : false;
    };
    host.getSourceFile = function (fileName, languageVersion, onError) {
        if (fileName === cachedLibPath)
            return cachedLib;
        if (path.isAbsolute(fileName))
            fileName = path.relative(process.cwd(), fileName);
        var file = sources.get(fileName);
        if (file) {
            return ts.createSourceFile(fileName, file, ts.ScriptTarget.Latest, true);
        }
        throw new Error('unexpected file read of ' + fileName + ' not in ' + util_1.toArray(sources.keys()));
    };
    return ts.createProgram(util_1.toArray(sources.keys()), compilerOptions, host);
}
exports.createProgram = createProgram;
/** Emits transpiled output with tsickle postprocessing.  Throws an exception on errors. */
function emit(program) {
    var transformed = {};
    var diagnostics = program.emit(undefined, function (fileName, data) {
        transformed[fileName] =
            tsickle.convertCommonJsToGoogModule(fileName, data, cliSupport.pathToModuleName).output;
    }).diagnostics;
    if (diagnostics.length > 0) {
        throw new Error(tsickle.formatDiagnostics(diagnostics));
    }
    return transformed;
}
exports.emit = emit;
var GoldenFileTest = (function () {
    function GoldenFileTest(path, tsFiles) {
        this.path = path;
        this.tsFiles = tsFiles;
    }
    Object.defineProperty(GoldenFileTest.prototype, "name", {
        get: function () { return path.basename(this.path); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GoldenFileTest.prototype, "externsPath", {
        get: function () { return path.join(this.path, 'externs.js'); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GoldenFileTest.prototype, "tsPaths", {
        get: function () {
            var _this = this;
            return this.tsFiles.map(function (f) { return path.join(_this.path, f); });
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GoldenFileTest.prototype, "jsPaths", {
        get: function () {
            var _this = this;
            return this.tsFiles.map(function (f) { return path.join(_this.path, GoldenFileTest.tsPathToJs(f)); });
        },
        enumerable: true,
        configurable: true
    });
    GoldenFileTest.tsPathToJs = function (tsPath) { return tsPath.replace(/\.tsx?$/, '.js'); };
    return GoldenFileTest;
}());
exports.GoldenFileTest = GoldenFileTest;
function goldenTests() {
    var basePath = path.join(__dirname, '..', '..', 'test_files');
    var testNames = fs.readdirSync(basePath);
    var tests = testNames.map(function (testName) {
        var testDir = path.join(basePath, testName);
        testDir = path.relative(process.cwd(), testDir);
        var tsPaths = glob.sync(path.join(testDir, '*.ts'));
        tsPaths = tsPaths.concat(glob.sync(path.join(testDir, '*.tsx')));
        tsPaths = tsPaths.filter(function (p) { return !p.match(/\.tsickle\./) && !p.match(/\.decorated\./); });
        var tsFiles = tsPaths.map(function (f) { return path.relative(testDir, f); });
        return new GoldenFileTest(testDir, tsFiles);
    });
    return tests;
}
exports.goldenTests = goldenTests;
//# sourceMappingURL=test_support.js.map